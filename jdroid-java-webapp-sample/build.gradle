apply plugin: 'com.jdroid.java.webapp'

description = 'Jdroid Sample Server'

configurations.all {
	// check for updates every build
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

buildscript {
	dependencies {
		classpath 'com.jdroidframework:jdroid-gradle-java-webapp-plugin:' + JDROID_GRADLE_PLUGIN_VERSION
	}
}

dependencies {

	//compile 'com.jdroidframework:jdroid-java-webaapp-core:' + jdroidVersion
	compile project(':jdroid-java-webapp-core')
	compile project(':jdroid-java-webapp-facebook')
	compile project(':jdroid-java-webapp-twitter')
	compile project(':jdroid-java-webapp-push')

	if (jdroid.getBooleanProp("JDROID_JAVA_AS_PROJECT_DEPENDENCY", false)) {
		compile(project(':jdroid-java-firebase-database')) {
			exclude module: 'jdroid-java-core'
		}
	} else {
		compile('com.jdroidframework:jdroid-java-firebase-database:' + JDROID_JAVA_VERSION) {
			exclude module: 'jdroid-java-core'
		}
	}

	if (jdroid.getBooleanProp("JDROID_JAVA_HTTP_AS_PROJECT_DEPENDENCY", false)) {
		compile project(":jdroid-java-http-okhttp")
	} else {
		compile ('com.jdroidframework:jdroid-java-http-okhttp:' + JDROID_JAVA_HTTP_VERSION) {
			exclude module: 'jdroid-java-core'
		}
	}

	compile 'com.firebase:firebase-token-generator:2.0.0'

	// Testing
	testCompile "org.testng:testng:6.8.21"
	testCompile "org.mockito:mockito-all:1.10.19"
}

// Generate the settings.properties
project.afterEvaluate {

	project.task('generateBuildConfigClass') {
		doLast {
			File dir = new File("$projectDir/build/generated/com/jdroid/javaweb/sample/context")
			dir.mkdirs()
			File file = new File(dir, "BuildConfig.java")
			file.withWriter { out ->

				out.writeLine("package com.jdroid.javaweb.sample.context;")
				out.writeLine("")
				out.writeLine("public class BuildConfig {")
				jdroid.setBuildConfigString(out, 'APP_NAME', project.name)
				jdroid.setBuildConfigString(out, 'APP_VERSION', project.version.toString())
				jdroid.setBuildConfigString(out, 'BUILD_TYPE')
				jdroid.setBuildConfigString(out, 'BUILD_TIME', jdroid.getBuildTime())
				jdroid.setBuildConfigString(out, 'GIT_BRANCH', jdroid.getGitBranch())
				jdroid.setBuildConfigString(out, 'GIT_SHA', jdroid.getGitSha())
				jdroid.setBuildConfigString(out, 'MIN_API_VERSION', '1.0')
				jdroid.setBuildConfigString(out, 'GOOGLE_SERVER_API_KEY')

				jdroid.setBuildConfigBoolean(out, 'HTTP_MOCK_ENABLED')
				jdroid.setBuildConfigInteger(out, 'HTTP_MOCK_SLEEP_DURATION')

				jdroid.setBuildConfigString(out, 'ADMIN_TOKEN', 'admin')

				jdroid.setBuildConfigString(out, 'TWITTER_OAUTH_CONSUMER_KEY')
				jdroid.setBuildConfigString(out, 'TWITTER_OAUTH_CONSUMER_SECRET')
				jdroid.setBuildConfigString(out, 'TWITTER_OAUTH_ACCESS_TOKEN')
				jdroid.setBuildConfigString(out, 'TWITTER_OAUTH_ACCESS_TOKEN_SECRET')
				jdroid.setBuildConfigBoolean(out, 'TWITTER_ENABLED', false)

				jdroid.setBuildConfigString(out, 'FIREBASE_URL')
				jdroid.setBuildConfigString(out, 'FIREBASE_AUTH_TOKEN')

				jdroid.setBuildConfigBoolean(out, 'SENTRY_ENABLED', false)
				jdroid.setBuildConfigString(out, 'SENTRY_DSN')
				out.writeLine("}")
			}
		}
	}

	project.tasks.'compileJava'.dependsOn 'generateBuildConfigClass'
}

test {
	useTestNG {
	}
}

// https://blog.openshift.com/run-gradle-builds-on-openshift/
war {
	archiveName = 'ROOT.war'
//	destinationDir = file('webapps')
}

